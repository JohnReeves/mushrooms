{
  "name": "Mushrooms",
  "tagline": "Digital mushrooms for your digital pizza - thank you Elly and Tabby for the idea!",
  "body": "#Mushroom Topping worksheet\r\n\r\n##Task 1 - Making one big mushroom\r\n\r\nOpen up your Python Pizza from last time, and remember the steps in making a minimal  tk canvas:\r\n             \r\n```\r\n        #import the libraries\r\n        #create a top level object\r\n        #attach a canvas\r\n        #draw something\r\n        #run the mainloop\r\n```\r\n\r\n\r\nWe need to make a compound shape - a semicircle on top of a rectangle.\r\n\r\n![Imgur](https://i.imgur.com/SJdGZAZ.png)\r\n\r\n###Make the semi-circle\r\n\r\n```\r\nCreate_arc((),(), style=”chord”, start=angle, extent=180)\r\n```\r\n\r\n*NB: Changing the start angle but keeping the extent as 180, has the effect of rotating the arc.*\r\n\r\n###Making the rectangle\r\n\r\nThere are two ways of creating reactangles in Tk:\r\n\r\n*Using create_rectangle(...)\r\n\r\n*With a bit of trial and error, you discover that it is hard to rotate using create_rectangle\r\n\r\n*Using create_polygon(...)\r\n\r\n*Polygons can be rotated with a bit of maths, so use create_polygon() to make your rectangles\r\n\r\n###Making a compound shapes\r\n\r\nOur mushroom is made by putting the arc on top of the rectangle.\r\n\r\nLinking the shapes together based on the centre of the circular arc is useful for keeping the shapes together when we move them.\r\n\r\n``` \r\n    l=r/2\r\n    box=[(p[0]-r,p[1]-r),(p[0]+r,p[1]+r)]\r\n    canvas.create_arc(topbox,style=\"chord\", fill=color, start=rot,extent=180)\r\n    poly=[(p[0]-l,p[1]),(p[0]+l,p[1]),(p[0]+l,p[1]+r),(p[0]-l,p[1]+r)]\r\n    canvas.create_polygon(poly, fill=color,outline=\"black\")\r\n```\r\n    \r\n## Task 2 - Python functions\r\n\r\nPutting the shapes into a function, keeps the shape together, and allows it to draw anywhere on the screen.\r\n\r\nFunctions in Python are identified with the keyword `def`, this is what mine looks like:\r\n\r\n```\r\n    def mushroom(p=(50,50),r=100, color=\"red\", rotation=0):\r\n        l=r/2\r\n        box=[(p[0]-r,p[1]-r),(p[0]+r,p[1]+r)]\r\n        canvas.create_arc(topbox,style=\"chord\", fill=color, start=rotation, extent=180)\r\n        poly=[(p[0]-l,p[1]),(p[0]+l,p[1]),(p[0]+l,p[1]+r),(p[0]-l,p[1]+r)]\r\n        canvas.create_polygon(poly, fill=color,outline=\"black\")\r\n```\r\n\r\n \r\n## Task 3 - Rotating the big mushroom\r\n\r\n![Imgur](https://i.imgur.com/9c4YRLc.png)\r\n\r\nThe arc rotates easily by changing the start angle. Rectangles don’t rotate but we can rotate the points of a rectangle separately if we create it as a polygon instead!\r\n\r\nSo, an excellent use for transformations from the maths classes at school, where a rotation of a shape a point is described as:\r\n\r\n1. translate to origin\r\n2. rotate\r\n3. translate to original position\r\n\r\nMaths has a simple, and somewhat scary equation, to give you the points of a rotation about the origin.\r\n\r\n![Imgur](https://i.imgur.com/tmQxg0G.png)\r\n\r\nEach point in the polygon is changed to become:\r\n\r\n![Imgur](https://i.imgur.com/cudWZTy.png)\r\n\r\nIn Python this is written as:\r\n\r\n```\r\n    \t#rotate\r\n    \trotx = transx*math.cos(-theta)-transy*math.sin(-theta)\r\n    \troty = transx*math.sin(-theta)+transy*math.cos(-theta)\r\n```\r\n\r\n* Putting it together\r\n\r\n```\r\n    \t#translate to origin - -50,0 50,0\r\n        transx=point[0]-origin[0]\r\n        transy=point[1]-origin[1]\r\n        \r\n    \t#rotate\r\n    \trotx = transx*math.cos(-theta)-transy*math.sin(-theta)\r\n    \troty = transx*math.sin(-theta)+transy*math.cos(-theta)\r\n    \t\r\n    \t#translate back\r\n    \ttransx = rotx + origin[0]\r\n    \ttransy = roty + origin[1]\r\n    \t\r\n    \t#add to the list of points\r\n        rotatedPoints.append( transx )\r\n        rotatedPoints.append( transy )\r\n```\r\n \r\nUsing what we learned about Python functions in putting the shapes together, we can make a function that takes in a list of points and returns a list of points that have been rotated by an angle about a point.\r\n\r\n```\r\ndef rotate(points, angle, origin):\r\n  \timport math\r\n  \ttheta = math.radians(angle)\r\n  \trotatedPoints = []\r\n  \tfor point in points:\r\n    \t\r\n    \t#translate to origin - -50,0 50,0\r\n        transx=point[0]-origin[0]\r\n        transy=point[1]-origin[1]\r\n        \r\n    \t#rotate\r\n    \trotx = transx*math.cos(-theta)-transy*math.sin(-theta)\r\n    \troty = transx*math.sin(-theta)+transy*math.cos(-theta)\r\n    \t\r\n    \t#translate back\r\n    \ttransx = rotx + origin[0]\r\n    \ttransy = roty + origin[1]\r\n    \t\r\n    \t#add to the list of points\r\n        rotatedPoints.append( transx )\r\n        rotatedPoints.append( transy )\r\n        \r\n  \treturn rotatedPoints\r\n```\r\n\r\nNotice that we try to name our variables in an understandable way, so the code reads like a little essay reminding us what we are trying to do.\r\n\r\n*NB: now test your function, giving it lots of numbers, so that you understand what it means*\r\n\r\n## Task 4 - Making many mushrooms\r\n\r\n![Imgur](https://i.imgur.com/jr1hNi1.png)\r\n\r\nMushrooms have slight differences in size, and get a bit muddled when I put them on the pizza. \r\n\r\nIt would be pretty neat if we could do the same in Python.\r\n\r\nOur mushroom function lets us set size, position, color, and angle to give plenty of variety to the pizza topping, and lets us put mushroom anywhere we like.\r\n\r\nLet’s see what happens when we add a little loop, and have a slight variation for size and rotation, to make the toppings look ‘natural’:\r\n\r\n```\r\nfrom random import randint\r\nfor x in range(5):\r\n    px,py=randint(20,280),randint(20,280)\r\n\tr=randint(20,30)\r\n    rot=randint(-20,30)\r\n    mushroom((px,py),r,rot,color)\r\n```\r\n\r\n## Task 5 - Make other compound shapes\r\n\r\nYou could try:\r\n* Celery sticks\r\n* Sausage\r\n* Tomato slices\r\n\r\n\r\n* Here’s my complete code listing, so you know what it might look like:\r\n\r\n```\r\n\"\"\"rotate a line on a canvas\r\ngive it a line and a point to rotate it about\r\nreturn points to draw\r\n\"\"\"\r\n \r\ntry:\r\n\timport Tkinter as tk\r\nexcept ImportError:\r\n\timport tkinter as tk\r\n \r\ndef mushroom(p=(250,400),r=100,rot=30,color=\"red\"):\r\n \r\n\tdef rotate(points, angle, origin):\r\n  \timport math\r\n  \ttheta = math.radians(angle)\r\n  \trotatedPoints = []\r\n  \tfor point in points:\r\n    \t\r\n    \t#translate to origin - -50,0 50,0\r\n        transx=point[0]-origin[0]\r\n        transy=point[1]-origin[1]\r\n    \t#rotate\r\n    \trotx = transx*math.cos(-theta)-transy*math.sin(-theta)\r\n    \troty = transx*math.sin(-theta)+transy*math.cos(-theta)\r\n    \t#translate back\r\n    \ttransx = rotx + origin[0]\r\n    \ttransy = roty + origin[1]\r\n    \t\r\n    \t#add to the list of points\r\n        rotatedPoints.append( transx )\r\n        rotatedPoints.append( transy )\r\n  \treturn rotatedPoints\r\n\t\r\n\tl=r/2\r\n \r\n    topbox=[(p[0]-r,p[1]-r),(p[0]+r,p[1]+r)]\r\n    canvas.create_arc(topbox,style=\"chord\", fill=color, start=rot,extent=180)\r\n \r\n    poly0=[(p[0]-l,p[1]),(p[0]+l,p[1]),(p[0]+l,p[1]+r),(p[0]-l,p[1]+r)]\r\n\tpoly=rotate(poly0, rot, p)\r\n    canvas.create_polygon(poly, fill=color,outline=\"black\")\r\n \r\n# step 1: create the top level Tk object\r\nwindow=tk.Tk()\r\nwindow.title(\"a window\")\r\n \r\n# step 2: create the canvas\r\nc_width,c_height=300,300\r\ncanvas=tk.Canvas(width=c_width, height=c_height)\r\n \r\n# step 3: draw stuff on the canvas\r\np,r,rot=(250,400),100,5\r\ncolor=\"grey\"\r\n \r\nfrom random import randint\r\n \r\nfor x in range(5):\r\n    px,py=randint(20,280),randint(20,280)\r\n\tr=randint(20,30)\r\n    rot=randint(-20,30)\r\n    mushroom((px,py),r,rot,color)\r\n \r\n#px,py=c_width/2,c_height/2\r\n#r=100\r\n#rot=10\r\n#mushroom((px,py),r,rot)\r\n#\r\ncanvas.pack()\r\nwindow.mainloop()\r\n```\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}